{:deps {org.babashka/http-server {:mvn/version "0.1.11"}
        org.babashka/cli {:mvn/version "0.7.51"}}
 :pods {clj-kondo/clj-kondo {:version "2023.01.20"}}
 :tasks
 {:requires ([babashka.cli :as cli]
             [babashka.fs :as fs]
             [pod.borkdude.clj-kondo :as clj-kondo])

  clean
  (shell "rm -rf .vpyenv .vnodeenv node_modules")

  lint
  {:doc "Lint all code directories with clj-kondo."
   :task (clj-kondo/print!
          (clj-kondo/run! {:lint ["bb.edn" "deps.edn" "src"]}))}

  format
  {:doc "Format all code with cljfmt."
   :task (do (clojure "-Ttools install-latest :lib io.github.weavejester/cljfmt :as cljfmt")
             (clojure "-Tcljfmt fix :paths '[\"bb.edn\" \"deps.edn\" \"src\"]'"))}

  upgrade
  {:doc "Upgrade all code with antq."
   :task (do (clojure "-Ttools install-latest :lib com.github.liquidz/antq :as antq")
             (clojure "-Tantq outdated :check-clojure-tools true :upgrade true"))}

  watson
  {:doc "Scan for vulnerable direct/transitive dependencies with clj-watson."
   :task (do (clojure "-Ttools install-latest :lib io.github.clj-holmes/clj-watson :as clj-watson")
             (clojure "-Tclj-watson scan '{:output \"stdout\" :dependency-check-properties nil :fail-on-result true :deps-edn-path \"deps.edn\" :suggest-fix true :aliases [\"*\"] :database-strategy \"dependency-check\"}'"))}

  -vpyenv-install
  (if-not (fs/exists? ".vpyenv")
    (do
      (shell "python3 -m venv .vpyenv")
      (shell "bash -c" "source .vpyenv/bin/activate && pip install -q --upgrade pip")))

  -vnodeenv-install
  {:depends [-vpyenv-install]
   :task (if-not (fs/exists? ".vpyenv/bin/nodeenv")
           (shell "bash -c" "source .vpyenv/bin/activate && pip install -q nodeenv"))}

  -node-install
  {:depends [-vnodeenv-install]
   :task (if-not (fs/exists? ".vnodeenv")
           (shell "bash -c" "source .vpyenv/bin/activate && nodeenv -q .vnodeenv"))}

  -npm-install
  {:depends [-node-install]
   :task (shell "bash -c" "source .vnodeenv/bin/activate && npm install -q")}

  build
  {:depends [-npm-install]
   :doc "Runs build for clojurescript + tailwind."
   :task (do
           (shell "bash -c 'source .vnodeenv/bin/activate && npx browserslist@latest --update-db'")
           (shell "bash -c 'source .vnodeenv/bin/activate && npm run build'"))}

  watch
  {:depends [build]
   :doc "Runs start for `shadow-cljs` with `watch` option."
   :task (shell "bash -c 'source .vnodeenv/bin/activate && npm start'")}

  styles-watch
  {:depends [build]
   :doc "Runs styles-watch for tailwind with autorebuild."
   :task (shell "bash -c 'source .vnodeenv/bin/activate && npm run styles-watch'")}}}
